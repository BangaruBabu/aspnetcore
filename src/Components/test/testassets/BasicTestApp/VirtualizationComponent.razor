<p>
    Item size:<br />
    <input type="number" @bind-value="itemSize" />
</p>

<p>
    Stacked lists (fixed):<br />
    <div id="stacked-container" style="background-color: #eee; height: 500px; overflow-y: auto">
        <Virtualize Items="@fixedItems" ItemSize="itemSize">
            <div id="stacked-top-item" style="height: @(itemSize)px; background-color: rgb(@((context % 2) * 255), @((1-(context % 2)) * 255), 255);">Item @context</div>
        </Virtualize>
        <Virtualize Items="@fixedItems" ItemSize="itemSize">
            <div id="stacked-bottom-item" style="height: @(itemSize)px; background-color: rgb(0, @((context % 2) * 255), @((1-(context % 2)) * 255));">Item @context</div>
        </Virtualize>
    </div>
</p>

<p>
    Deferred:<br />
    <div style="background-color: #eee; height: 500px; overflow-y: auto">
        <Virtualize ItemsProvider="GetItemsAsync" ItemSize="itemSize">
            <Item>
                <div style="height: @(itemSize)px; background-color: rgb(@((context % 2) * 255), @((1-(context % 2)) * 255), 255);">Item @context</div>
            </Item>
            <Placeholder>
                <div style="height: @(itemSize)px; background-color: orange;">Loading item @context.Index...</div>
            </Placeholder>
        </Virtualize>
    </div>
</p>

<p>
    Deferred (cached):<br />
    <div style="background-color: #eee; height: 500px; overflow-y: auto">
        <Virtualize ItemsProvider="GetItemsAsyncCached" ItemSize="itemSize">
            <Item>
                <div style="height: @(itemSize)px; background-color: rgb(@((context % 2) * 255), @((1-(context % 2)) * 255), 255);">Item @context</div>
            </Item>
            <Placeholder>
                <div style="height: @(itemSize)px; background-color: orange;">Loading item @context.Index...</div>
            </Placeholder>
        </Virtualize>
    </div>
</p>

<p>
    Viewport as root (fixed):<br />
    <Virtualize Items="@fixedItems" ItemSize="itemSize">
        <div style="height: @(itemSize)px; background-color: rgb(@((context % 2) * 255), @((1-(context % 2)) * 255), 255);">Item @context</div>
    </Virtualize>
</p>

@code {
    float itemSize = 100;
    ICollection<int> fixedItems = Enumerable.Range(0, 1000).ToList();

    HashSet<int> cachedItems = new HashSet<int>();

    int itemCountLimit = 200;

    async ValueTask<ItemsProviderResult<int>> GetItemsAsync(ItemsProviderRequest request)
    {
        await Task.Delay(500, request.CancellationToken);

        return new ItemsProviderResult<int>(Enumerable.Range(request.StartIndex, request.Count), itemCountLimit);
    }

    async ValueTask<ItemsProviderResult<int>> GetItemsAsyncCached(ItemsProviderRequest request)
    {
        var items = Enumerable.Range(request.StartIndex, request.Count);

        foreach (var item in items)
        {
            if (!cachedItems.Contains(item))
            {
                await Task.Delay(50, request.CancellationToken);

                cachedItems.Add(item);
            }
        }

        return new ItemsProviderResult<int>(items, itemCountLimit);
    }
}
